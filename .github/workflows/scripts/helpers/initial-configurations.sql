-- 1) TABLES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.tables WHERE [object_id] = OBJECT_ID('DATATINO_PROTO_1.LAYOUT_TYPES'))
CREATE TABLE [DATATINO_PROTO_1].[LAYOUT_TYPES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

INSERT INTO [DATATINO_PROTO_1].[LAYOUT_TYPES]
VALUES
('N/A', 'Not Applicable'),
('Web', 'A source file that can be found by going to the specified URL in the source. File needs to be reachable by means of the URL'),
('AzureBlob', 'A source file that can be found in an Azure Storage Account (Blob)')
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.tables WHERE [object_id] = OBJECT_ID('DATATINO_PROTO_1.MOCKS'))
CREATE TABLE [DATATINO_PROTO_1].[MOCKS](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED NOT NULL,
	[COLUMNS] [nvarchar](200) NOT NULL,
	[DATA_TYPES] [nvarchar](450) NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE [name] = 'IX_MOCKS_NAME_COLUMNS_DATA_TYPES')
CREATE NONCLUSTERED INDEX [IX_MOCKS_NAME_COLUMNS_DATA_TYPES] ON [DATATINO_PROTO_1].[MOCKS]
(
	[NAME] ASC,
	[COLUMNS] ASC,
	[DATA_TYPES] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.tables WHERE [object_id] = OBJECT_ID('DATATINO_PROTO_1.PROTOS'))
CREATE TABLE [DATATINO_PROTO_1].[PROTOS](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED NOT NULL,
	[HEADER_NAMES] [nvarchar](200) NOT NULL,
	[HEADER_VALUES] [nvarchar](200) NOT NULL,
	[ACTIVE] [int] NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE [name] = 'IX_PROTOS_NAME')
CREATE UNIQUE NONCLUSTERED INDEX [IX_PROTOS_NAME] ON [DATATINO_PROTO_1].[PROTOS]
(
	[NAME] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

INSERT [DATATINO_PROTO_1].[PROTOS]
VALUES
('name|code|proto_name|last_generated','NL|NL|NL|=GETDATE()','1','NL','Proto File for NL')


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.tables WHERE [object_id] = OBJECT_ID('DATATINO_PROTO_1.VIEWS'))
CREATE TABLE [DATATINO_PROTO_1].[VIEWS](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED NOT NULL,
	[LAST_UPDATE_NAME] [nvarchar](450) NOT NULL,
	[CONSTRAINT_KEY_NAME] [nvarchar](200) NULL,
	[CONSTRAINT_VALUE] [nvarchar](200) NULL,
	[GROUPED_KEY_NAME] [nvarchar](200) NULL,
	[GROUPED_LAST_UPDATE_NAME] [nvarchar](200) NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE [name] = 'IX_VIEWS_NAME_LUN_CKN_CV_GKN_GLUN')
CREATE UNIQUE NONCLUSTERED INDEX [IX_VIEWS_NAME_LUN_CKN_CV_GKN_GLUN] ON [DATATINO_PROTO_1].[VIEWS]
(
	[NAME] ASC,
	[LAST_UPDATE_NAME] ASC,
	[CONSTRAINT_KEY_NAME] ASC,
	[CONSTRAINT_VALUE] ASC,
	[GROUPED_KEY_NAME] ASC,
	[GROUPED_LAST_UPDATE_NAME] ASC
)
WHERE ([CONSTRAINT_KEY_NAME] IS NOT NULL AND [CONSTRAINT_VALUE] IS NOT NULL AND [GROUPED_KEY_NAME] IS NOT NULL AND [GROUPED_LAST_UPDATE_NAME] IS NOT NULL)
WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

DROP TABLE IF EXISTS [DATATINO_PROTO_1].[CONFIGURATIONS]
GO

CREATE TABLE [DATATINO_PROTO_1].[CONFIGURATIONS](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED NOT NULL,
	[PROTO_ID] [bigint] NOT NULL,
	[VIEW_ID] [bigint] NOT NULL,
	[CONSTRAINED] [int] NOT NULL,
	[GROUPED] [int] NOT NULL,
	[COLUMNS] [nvarchar](max) NOT NULL,
	[MAPPING] [nvarchar](max) NULL,
	[LAYOUT_TYPE_ID] [bigint] NOT NULL,
	[MOCK_ID] [bigint] NULL,
	[ACTIVE] [int] NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_CONFIGURATIONS_LAYOUT_TYPE_ID] ON [DATATINO_PROTO_1].[CONFIGURATIONS]
(
	[LAYOUT_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_CONFIGURATIONS_MOCK_ID] ON [DATATINO_PROTO_1].[CONFIGURATIONS]
(
	[MOCK_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

SET ANSI_PADDING ON
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_CONFIGURATIONS_PROTO_ID_NAME] ON [DATATINO_PROTO_1].[CONFIGURATIONS]
(
	[PROTO_ID] ASC,
	[NAME] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_CONFIGURATIONS_VIEW_ID] ON [DATATINO_PROTO_1].[CONFIGURATIONS]
(
	[VIEW_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

ALTER TABLE [DATATINO_PROTO_1].[CONFIGURATIONS]  WITH CHECK ADD  CONSTRAINT [FK_CONFIGURATION_LAYOUT_TYPE] FOREIGN KEY([LAYOUT_TYPE_ID])
REFERENCES [DATATINO_PROTO_1].[LAYOUT_TYPES] ([ID])
GO
ALTER TABLE [DATATINO_PROTO_1].[CONFIGURATIONS] CHECK CONSTRAINT [FK_CONFIGURATION_LAYOUT_TYPE]
GO
ALTER TABLE [DATATINO_PROTO_1].[CONFIGURATIONS]  WITH CHECK ADD  CONSTRAINT [FK_CONFIGURATION_MOCK] FOREIGN KEY([MOCK_ID])
REFERENCES [DATATINO_PROTO_1].[MOCKS] ([ID])
GO
ALTER TABLE [DATATINO_PROTO_1].[CONFIGURATIONS] CHECK CONSTRAINT [FK_CONFIGURATION_MOCK]
GO
ALTER TABLE [DATATINO_PROTO_1].[CONFIGURATIONS]  WITH CHECK ADD  CONSTRAINT [FK_CONFIGURATION_PROTO] FOREIGN KEY([PROTO_ID])
REFERENCES [DATATINO_PROTO_1].[PROTOS] ([ID])
GO
ALTER TABLE [DATATINO_PROTO_1].[CONFIGURATIONS] CHECK CONSTRAINT [FK_CONFIGURATION_PROTO]
GO
ALTER TABLE [DATATINO_PROTO_1].[CONFIGURATIONS]  WITH CHECK ADD  CONSTRAINT [FK_CONFIGURATION_VIEW] FOREIGN KEY([VIEW_ID])
REFERENCES [DATATINO_PROTO_1].[VIEWS] ([ID])
GO
ALTER TABLE [DATATINO_PROTO_1].[CONFIGURATIONS] CHECK CONSTRAINT [FK_CONFIGURATION_VIEW];
GO

/*

DATATINO ORHCESTRATOR

*/

-- 1) DELIMETER TYPES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.tables WHERE [object_id] = OBJECT_ID('[DATATINO_ORCHESTRATOR_1].[DELIMITER_TYPES]'))
CREATE TABLE [DATATINO_ORCHESTRATOR_1].[DELIMITER_TYPES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED  NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

INSERT INTO [DATATINO_ORCHESTRATOR_1].[DELIMITER_TYPES] (
    [NAME],
    [DESCRIPTION]
)
VALUES
('N/A','Not Applicable'),
('Space','A file delimited by " "'),
('Colon','A file delimited by ","'),
('SemiColon','A file delimited by ";"'),
('Pipe','A file delimited by "|"')
GO

-- 2) SOURCE TYPES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.tables WHERE [object_id] = OBJECT_ID('[DATATINO_ORCHESTRATOR_1].[SOURCE_TYPES]'))
CREATE TABLE [DATATINO_ORCHESTRATOR_1].[SOURCE_TYPES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED  NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

INSERT INTO [DATATINO_ORCHESTRATOR_1].[SOURCE_TYPES] (
    [NAME],
    [DESCRIPTION]
)
VALUES
('StoredProcedure','A SQL Server Stored Procedure ([SCHEMA].[SP_NAME])'),
('CsvFile',	'A CSV file as source. Delimiter can be specified in the source'),
('JsonFile',	'A JSON file, can be array based, object based or combined'),
('HTTP_POST',	'A HTTP_POST request to be executed'),
('RestrictedApi',	'Use this when the API you want to use restricts you in the number of records you may ingest. Pipe delimited, where the first URL is the count query, and the second the URL for the full dataset)')
GO

-- 3) LOCATION TYPES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.tables WHERE [object_id] = OBJECT_ID('[DATATINO_ORCHESTRATOR_1].[LOCATION_TYPES]'))
CREATE TABLE [DATATINO_ORCHESTRATOR_1].[LOCATION_TYPES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

INSERT INTO [DATATINO_ORCHESTRATOR_1].[LOCATION_TYPES] (
    [NAME],
    [DESCRIPTION]
)
VALUES
('N/A','Not Applicable'),
('Web',	'A source file that can be found by going to the specified URL in the source. File needs to be reachable by means of the URL'),
('AzureBlob',	'A source file that can be found in an Azure Storage Account (Blob)')
GO

-- 4) SECURITY PROFILE TYPES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.tables WHERE [object_id] = OBJECT_ID('[DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILE_TYPES]'))
CREATE TABLE [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILE_TYPES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED  NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

INSERT INTO [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILE_TYPES] (
    [NAME],
    [DESCRIPTION]
)
VALUES
('NA','Not Applicable'),
('NETWORK_CREDENTIAL',	'Authentication is done by means of a username and password, concatenated and pipe-delimited. E.g. <USERNAME>|<PASSWORD>'),
('AZURE_BLOB',	'Authentication is done by means of a Blob connection string'),
('SQL_SERVER',	'Authentication is done by means of a Database connection string: Server=tcp:<SERVER_NAME>,<PORT>;Initial Catalog=<DATABASE_NAME>;User ID=<USER_NAME;Password=<PASSWORD>;'),
('BEARER',	'Authentication is done by means of a Bearer token that will be added to the Headers of the WebClient as follows: ''Bearer <TOKEN>''')
GO

-- 5) DATAFLOW TYPES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.tables WHERE [object_id] = OBJECT_ID('[DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES]'))
CREATE TABLE [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED  NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

INSERT INTO [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES] (
    [NAME],
    [DESCRIPTION]
)
VALUES
('Workflow','Main'),
('Process',	'Step')
GO

-- 6) SECURITY PROFILES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

DROP TABLE IF EXISTS [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILES]
GO

CREATE TABLE [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED NOT NULL,
	[SPT_ID] [bigint] NOT NULL,
	[ACTIVE] [int] NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

SET ANSI_PADDING ON
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SECURITY_PROFILES_NAME_SPT_ID] ON [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILES]
(
	[NAME] ASC,
	[SPT_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_SECURITY_PROFILES_SPT_ID] ON [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILES]
(
	[SPT_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILES]  WITH CHECK ADD CONSTRAINT [FK_SECURITY_PROFILE_SECURITY_PROFILE_TYPE] FOREIGN KEY([SPT_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILE_TYPES] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILES] CHECK CONSTRAINT [FK_SECURITY_PROFILE_SECURITY_PROFILE_TYPE]
GO

INSERT INTO [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILES] (
    [SPT_ID],
	[ACTIVE],
	[NAME],
	[DESCRIPTION]
)
VALUES
(1, 1, 'N/A', 'Not Applicable'),
(2, 1, 'RIVM', 'Credentials for accessing the RIVM portal')
GO

-- 7) DATAFLOWS
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DATATINO_ORCHESTRATOR_1].[DATAFLOWS](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATAFLOW_TYPE_ID] [bigint] NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DATAFLOWS] ADD  CONSTRAINT [PK_DATAFLOWS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC,
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_DATAFLOWS_DATAFLOW_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]
(
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_DATAFLOWS_NAME] ON [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]
(
	[NAME] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]  WITH CHECK ADD  CONSTRAINT [FK_DATAFLOW_DATAFLOW_TYPE] FOREIGN KEY([DATAFLOW_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES] ([ID])
GO
ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DATAFLOWS] CHECK CONSTRAINT [FK_DATAFLOW_DATAFLOW_TYPE]
GO

-- 8) HISTORY DATAFLOWS
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [DATATINO_ORCHESTRATOR_1].[H_DATAFLOWS](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED  NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DATAFLOW_ID] [bigint] NOT NULL,
	[DATAFLOW_TYPE_ID] [bigint] NOT NULL,
	[START_RUN] [datetime2](7) NULL,
	[END_RUN] [datetime2](7) NULL,
	[STATUS] [int] NOT NULL,
	[MESSAGE] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_H_DATAFLOWS_DATAFLOW_ID_DATAFLOW_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[H_DATAFLOWS]
(
	[DATAFLOW_ID] ASC,
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_H_DATAFLOWS_DATAFLOW_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[H_DATAFLOWS]
(
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[H_DATAFLOWS]  WITH CHECK ADD CONSTRAINT [FK_H_DATAFLOWS_DATAFLOW_TYPES_DATAFLOW_TYPE_ID] FOREIGN KEY([DATAFLOW_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES] ([ID])
ON DELETE CASCADE
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[H_DATAFLOWS] CHECK CONSTRAINT [FK_H_DATAFLOWS_DATAFLOW_TYPES_DATAFLOW_TYPE_ID]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[H_DATAFLOWS]  WITH CHECK ADD  CONSTRAINT [FK_HDATAFLOW_DATAFLOW_TYPE] FOREIGN KEY([DATAFLOW_ID], [DATAFLOW_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOWS] ([ID], [DATAFLOW_TYPE_ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[H_DATAFLOWS] CHECK CONSTRAINT [FK_HDATAFLOW_DATAFLOW_TYPE]
GO

-- 9) SOURCES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [DATATINO_ORCHESTRATOR_1].[SOURCES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED  NOT NULL,
	[SOURCE_CONTENT] [nvarchar](max) NOT NULL,
	[SOURCE_COLUMNS] [nvarchar](max) NULL,
	[TARGET_COLUMNS] [nvarchar](max) NULL,
	[TARGET_NAME] [nvarchar](max) NULL,
	[SOURCE_TYPE_ID] [bigint] NOT NULL,
	[LOCATION_TYPE_ID] [bigint] NOT NULL,
	[DELIMITER_TYPE_ID] [bigint] NOT NULL,
	[SP_ID] [bigint] NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_SOURCES_DELIMITER_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[SOURCES]
(
	[DELIMITER_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_SOURCES_LOCATION_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[SOURCES]
(
	[LOCATION_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

SET ANSI_PADDING ON
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SOURCES_NAME_SOURCE_TYPE_ID_LOCATION_TYPE_ID_DELIMITER_TYPE_ID_SP_ID] ON [DATATINO_ORCHESTRATOR_1].[SOURCES]
(
	[NAME] ASC,
	[SOURCE_TYPE_ID] ASC,
	[LOCATION_TYPE_ID] ASC,
	[DELIMITER_TYPE_ID] ASC,
	[SP_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_SOURCES_SOURCE_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[SOURCES]
(
	[SOURCE_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_SOURCES_SP_ID] ON [DATATINO_ORCHESTRATOR_1].[SOURCES]
(
	[SP_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SOURCES]  WITH CHECK ADD  CONSTRAINT [FK_SOURCE_DELIMITER_TYPE] FOREIGN KEY([DELIMITER_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DELIMITER_TYPES] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SOURCES] CHECK CONSTRAINT [FK_SOURCE_DELIMITER_TYPE]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SOURCES]  WITH CHECK ADD  CONSTRAINT [FK_SOURCE_LOCATION_TYPE] FOREIGN KEY([LOCATION_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[LOCATION_TYPES] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SOURCES] CHECK CONSTRAINT [FK_SOURCE_LOCATION_TYPE]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SOURCES]  WITH CHECK ADD  CONSTRAINT [FK_SOURCE_SECURITY_PROFILE] FOREIGN KEY([SP_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILES] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SOURCES] CHECK CONSTRAINT [FK_SOURCE_SECURITY_PROFILE]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SOURCES]  WITH CHECK ADD  CONSTRAINT [FK_SOURCE_SOURCE_TYPE] FOREIGN KEY([SOURCE_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[SOURCE_TYPES] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[SOURCES] CHECK CONSTRAINT [FK_SOURCE_SOURCE_TYPE]
GO

-- 10) WORKFLOWS
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DATATINO_ORCHESTRATOR_1].[WORKFLOWS](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATAFLOW_ID] [bigint] NULL,
	[DATAFLOW_TYPE_ID] [bigint] NOT NULL,
	[SCHEDULE] [nvarchar](100) NOT NULL,
	[NEXT_RUN] [datetime2](7) NULL,
	[LAST_RUN] [datetime2](7) NULL,
	[ACTIVE] [int] NOT NULL
) ON [PRIMARY]
GO
ALTER TABLE [DATATINO_ORCHESTRATOR_1].[WORKFLOWS] ADD  CONSTRAINT [PK_WORKFLOWS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_WORKFLOWS_DATAFLOW_ID] ON [DATATINO_ORCHESTRATOR_1].[WORKFLOWS]
(
	[DATAFLOW_ID] ASC
)
WHERE ([DATAFLOW_ID] IS NOT NULL)
WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_WORKFLOWS_DATAFLOW_ID_DATAFLOW_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[WORKFLOWS]
(
	[DATAFLOW_ID] ASC,
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_WORKFLOWS_DATAFLOW_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[WORKFLOWS]
(
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [DATATINO_ORCHESTRATOR_1].[WORKFLOWS]  WITH CHECK ADD  CONSTRAINT [FK_WORKFLOWS_DATAFLOW_TYPES_DATAFLOW_TYPE_ID] FOREIGN KEY([DATAFLOW_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [DATATINO_ORCHESTRATOR_1].[WORKFLOWS] CHECK CONSTRAINT [FK_WORKFLOWS_DATAFLOW_TYPES_DATAFLOW_TYPE_ID]
GO
ALTER TABLE [DATATINO_ORCHESTRATOR_1].[WORKFLOWS]  WITH CHECK ADD  CONSTRAINT [FK_WORKFLOWS_DATAFLOWS_DATAFLOW_ID_DATAFLOW_TYPE_ID] FOREIGN KEY([DATAFLOW_ID], [DATAFLOW_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOWS] ([ID], [DATAFLOW_TYPE_ID])
GO
ALTER TABLE [DATATINO_ORCHESTRATOR_1].[WORKFLOWS] CHECK CONSTRAINT [FK_WORKFLOWS_DATAFLOWS_DATAFLOW_ID_DATAFLOW_TYPE_ID]
GO


-- 11) PROCESSES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [DATATINO_ORCHESTRATOR_1].[PROCESSES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED  NOT NULL,
	[WORKFLOW_ID] [bigint] NULL,
	[SOURCE_ID] [bigint] NULL,
	[DATAFLOW_ID] [bigint] NULL,
	[DATAFLOW_TYPE_ID] [bigint] NOT NULL,
	[SCHEDULE] [nvarchar](100) NOT NULL,
	[NEXT_RUN] [datetime2](7) NULL,
	[LAST_RUN] [datetime2](7) NULL,
	[ACTIVE] [int] NOT NULL
) ON [PRIMARY]
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_PROCESSES_DATAFLOW_ID] ON [DATATINO_ORCHESTRATOR_1].[PROCESSES]
(
	[DATAFLOW_ID] ASC
)
WHERE ([DATAFLOW_ID] IS NOT NULL)
WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_PROCESSES_DATAFLOW_ID_DATAFLOW_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[PROCESSES]
(
	[DATAFLOW_ID] ASC,
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_PROCESSES_DATAFLOW_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[PROCESSES]
(
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_PROCESSES_SOURCE_ID] ON [DATATINO_ORCHESTRATOR_1].[PROCESSES]
(
	[SOURCE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_PROCESSES_WORKFLOW_ID] ON [DATATINO_ORCHESTRATOR_1].[PROCESSES]
(
	[WORKFLOW_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[PROCESSES]  WITH CHECK ADD  CONSTRAINT [FK_PROCESS_DATAFLOW] FOREIGN KEY([DATAFLOW_ID], [DATAFLOW_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOWS] ([ID], [DATAFLOW_TYPE_ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[PROCESSES] CHECK CONSTRAINT [FK_PROCESS_DATAFLOW]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[PROCESSES]  WITH CHECK ADD  CONSTRAINT [FK_PROCESS_SOURCE] FOREIGN KEY([SOURCE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[SOURCES] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[PROCESSES] CHECK CONSTRAINT [FK_PROCESS_SOURCE]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[PROCESSES]  WITH CHECK ADD  CONSTRAINT [FK_PROCESS_WORKFLOW] FOREIGN KEY([WORKFLOW_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[WORKFLOWS] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[PROCESSES] CHECK CONSTRAINT [FK_PROCESS_WORKFLOW]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[PROCESSES]  WITH CHECK ADD  CONSTRAINT [FK_PROCESSES_DATAFLOW_TYPES_DATAFLOW_TYPE_ID] FOREIGN KEY([DATAFLOW_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES] ([ID])
ON DELETE CASCADE
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[PROCESSES] CHECK CONSTRAINT [FK_PROCESSES_DATAFLOW_TYPES_DATAFLOW_TYPE_ID]
GO

-- 12) DEPENDENCIES
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES](
	[ID] [bigint] IDENTITY(1,1) PRIMARY KEY CLUSTERED  NOT NULL,
	[DATAFLOW_ID] [bigint] NOT NULL,
	[DATAFLOW_TYPE_ID] [bigint] NOT NULL,
	[DEPENDENCY_ID] [bigint] NOT NULL,
	[DATAFLOW_TYPE_ID_DEPENDENCY] [bigint] NOT NULL,
	[WORKFLOW_ID] [bigint] NOT NULL,
	[ACTIVE] [int] NOT NULL,
	[NAME] [nvarchar](200) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_DEPENDENCIES_DATAFLOW_ID_DATAFLOW_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]
(
	[DATAFLOW_ID] ASC,
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_DEPENDENCIES_DATAFLOW_ID_DEPENDENCY_ID] ON [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]
(
	[DATAFLOW_ID] ASC,
	[DEPENDENCY_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_DEPENDENCIES_DATAFLOW_TYPE_ID] ON [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]
(
	[DATAFLOW_TYPE_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_DEPENDENCIES_DATAFLOW_TYPE_ID_DEPENDENCY] ON [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]
(
	[DATAFLOW_TYPE_ID_DEPENDENCY] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_DEPENDENCIES_DEPENDENCY_ID_DATAFLOW_TYPE_ID_DEPENDENCY] ON [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]
(
	[DEPENDENCY_ID] ASC,
	[DATAFLOW_TYPE_ID_DEPENDENCY] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_DEPENDENCIES_WORKFLOW_ID] ON [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]
(
	[WORKFLOW_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]  WITH CHECK ADD  CONSTRAINT [FK_DEPENDENCY_DATAFLOW] FOREIGN KEY([DATAFLOW_ID], [DATAFLOW_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOWS] ([ID], [DATAFLOW_TYPE_ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES] CHECK CONSTRAINT [FK_DEPENDENCY_DATAFLOW]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]  WITH CHECK ADD  CONSTRAINT [FK_DEPENDENCY_DATAFLOW_DEPENDENCY] FOREIGN KEY([DEPENDENCY_ID], [DATAFLOW_TYPE_ID_DEPENDENCY])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOWS] ([ID], [DATAFLOW_TYPE_ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES] CHECK CONSTRAINT [FK_DEPENDENCY_DATAFLOW_DEPENDENCY]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]  WITH CHECK ADD  CONSTRAINT [FK_DEPENDENCY_DATAFLOW_TYPE] FOREIGN KEY([DATAFLOW_TYPE_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES] CHECK CONSTRAINT [FK_DEPENDENCY_DATAFLOW_TYPE]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]  WITH CHECK ADD  CONSTRAINT [FK_DEPENDENCY_DATAFLOW_TYPE_DEPENDENCY] FOREIGN KEY([DATAFLOW_TYPE_ID_DEPENDENCY])
REFERENCES [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES] CHECK CONSTRAINT [FK_DEPENDENCY_DATAFLOW_TYPE_DEPENDENCY]
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES]  WITH CHECK ADD  CONSTRAINT [FK_DEPENDENCY_WORKFLOW] FOREIGN KEY([WORKFLOW_ID])
REFERENCES [DATATINO_ORCHESTRATOR_1].[WORKFLOWS] ([ID])
GO

ALTER TABLE [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES] CHECK CONSTRAINT [FK_DEPENDENCY_WORKFLOW]
GO

/*

VIEWS

*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER VIEW [DATATINO_PROTO_1].[V_PROTO_CONFIGURATIONS] AS
SELECT T2.ID
    ,T1.ID AS PROTO_ID
    ,T1.NAME AS PROTO_NAME
    ,T2.NAME AS ITEM_NAME
    ,T3.NAME AS VIEW_NAME
    ,T3.LAST_UPDATE_NAME
    ,T2.[CONSTRAINED]
    ,T3.CONSTRAINT_KEY_NAME
    ,T3.CONSTRAINT_VALUE
    ,T2.GROUPED
    ,T3.GROUPED_KEY_NAME
    ,T3.GROUPED_LAST_UPDATE_NAME
    ,T4.ID AS LAYOUT_ID
    ,T2.[ACTIVE]
    ,T2.COLUMNS
    ,T2.MOCK_ID
FROM DATATINO_PROTO_1.PROTOS T1
JOIN DATATINO_PROTO_1.CONFIGURATIONS T2 ON T1.ID = T2.PROTO_ID
JOIN DATATINO_PROTO_1.VIEWS T3 ON T2.VIEW_ID = T3.ID
JOIN DATATINO_PROTO_1.LAYOUT_TYPES T4 ON T2.LAYOUT_TYPE_ID = T4.ID
where T2.ACTIVE =1 
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER VIEW [DATATINO_PROTO_1].[V_CONFIGURATIONS] AS
SELECT T0.[ID]
    ,T0.[NAME] AS [CONFIG_NAME]
    ,T0.[PROTO_ID]
    ,T1.NAME AS [PROTO_NAME]
    ,T0.[VIEW_ID]   
    ,T2.[NAME] AS [VIEW_NAME]
    ,T0.[CONSTRAINED]
    ,T2.[CONSTRAINT_KEY_NAME]
    ,T2.[CONSTRAINT_VALUE]
    ,T2.[GROUPED_KEY_NAME]
    ,T2.[GROUPED_LAST_UPDATE_NAME]
    ,T2.[LAST_UPDATE_NAME]
    ,T0.[GROUPED]
    ,T0.[COLUMNS]
    ,T0.[MAPPING]
    ,T0.[LAYOUT_TYPE_ID]
    ,T3.[NAME] AS [LAYOUT_TYPE_NAME]
    ,T0.[MOCK_ID]
    ,T0.[ACTIVE]
    ,T0.[DESCRIPTION]
FROM [DATATINO_PROTO_1].[CONFIGURATIONS] AS T0
LEFT JOIN [DATATINO_PROTO_1].[PROTOS] AS T1 ON T1.[ID] = T0.[PROTO_ID]
LEFT JOIN [DATATINO_PROTO_1].[VIEWS] AS T2 ON T2.[ID] = T0.[VIEW_ID] 
LEFT JOIN [DATATINO_PROTO_1].[LAYOUT_TYPES] AS T3 ON T3.[ID] = T0.[LAYOUT_TYPE_ID] 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER VIEW  [DATATINO_ORCHESTRATOR_1].[V_WORKFLOWS] AS
SELECT T0.[ID]
    ,T0.[DATAFLOW_ID]
    ,T1.NAME
  --   ,T0.[DATAFLOW_TYPE_ID]
    ,T0.[SCHEDULE]
    ,T0.[NEXT_RUN]
    ,T0.[LAST_RUN]
    ,T0.[ACTIVE]
FROM [DATATINO_ORCHESTRATOR_1].[WORKFLOWS] AS T0
LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]           AS T1 ON T1.ID = T0.DATAFLOW_ID

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE OR ALTER  VIEW [DATATINO_ORCHESTRATOR_1].[V_WORKFLOW_PROCESSES] AS
SELECT 
      T3.NAME AS PROCESS_NAME
      ,T4.[DESCRIPTION]
      ,T4.NAME AS WORKFLOW_NAME
      ,T4.ID AS DATAFLOW_ID_WORKFLOW
      ,T3.ID AS DATAFLOW_ID_PROCESS
  FROM [DATATINO_ORCHESTRATOR_1].[PROCESSES] T1
  JOIN[DATATINO_ORCHESTRATOR_1].[WORKFLOWS] T2
  ON  t1.WORKFLOW_ID = t2.ID
  JOIN DATATINO_ORCHESTRATOR_1.DATAFLOWS T3
  ON T3.ID = T1.DATAFLOW_ID
  JOIN DATATINO_ORCHESTRATOR_1.DATAFLOWS T4
  ON T4.ID = T2.DATAFLOW_ID
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE OR ALTER VIEW [DATATINO_ORCHESTRATOR_1].[V_WORKFLOW_OVERVIEW] AS
SELECT A.ID, B.NAME, A.LAST_RUN, A.NEXT_RUN, A.SCHEDULE
FROM DATATINO_ORCHESTRATOR_1.WORKFLOWS A
         JOIN DATATINO_ORCHESTRATOR_1.DATAFLOWS B
              ON A.DATAFLOW_ID = B.ID
WHERE A.ACTIVE = 1
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER VIEW  [DATATINO_ORCHESTRATOR_1].[V_PROCESSES] AS

SELECT 
       T0.[ID]                  AS PROCESS_ID
      ,T4.NAME                  AS PROCESS_NAME
      ,T0.[WORKFLOW_ID]
      ,T2.NAME                  AS WORKFLOW_NAME
      ,T0.[SOURCE_ID]
      ,T3.NAME                  AS SOURCE_NAME
      ,T3.SOURCE_CONTENT
      ,T3.SOURCE_COLUMNS
      ,T3.TARGET_COLUMNS
      ,T3.TARGET_NAME
      ,T3.SOURCE_TYPE_ID
      ,T6.NAME                  AS SOURCE_TYPE_NAME
      ,T3.SP_ID
      ,T7.NAME                  AS SP_NAME

      ,T0.[DATAFLOW_ID]
    --   ,T0.[DATAFLOW_TYPE_ID]
    --   ,T5.NAME                  AS DATAFLOW_TYPE_NAME
      ,T0.[SCHEDULE]
      ,T0.[NEXT_RUN]
      ,T0.[LAST_RUN]
      ,T0.[ACTIVE]
  FROM [DATATINO_ORCHESTRATOR_1].[PROCESSES] AS T0
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[WORKFLOWS]           AS T1 ON T0.WORKFLOW_ID = T1.ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]           AS T2 ON T2.ID = T1.DATAFLOW_ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[SOURCES]             AS T3 ON T3.ID = T0.SOURCE_ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]           AS T4 ON T4.ID = T0.DATAFLOW_ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES]      AS T5 ON T5.ID = T0.DATAFLOW_TYPE_ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[SOURCE_TYPES]        AS T6 ON T6.ID = T3.SOURCE_TYPE_ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[SECURITY_PROFILES]   AS T7 ON T7.ID = T3.SP_ID
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE OR ALTER VIEW [DATATINO_ORCHESTRATOR_1].[V_PROCESS_OVERVIEW] AS
SELECT A.ID, B.NAME, B.ID AS DATAFLOW_ID,  A.LAST_RUN, A.NEXT_RUN, A.SCHEDULE
FROM DATATINO_ORCHESTRATOR_1.PROCESSES A
         JOIN DATATINO_ORCHESTRATOR_1.DATAFLOWS B
              ON A.DATAFLOW_ID = B.ID
WHERE A.ACTIVE = 1
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER VIEW [DATATINO_ORCHESTRATOR_1].[V_LINEAGE]
AS 


WITH VIEWS_CONFIGS_CTE AS ( 
    --Use logic from V_CONFIGURATIONS
    --Start on the protos end, retrieve all proto configs
      SELECT T0.[ID]
            ,T0.[NAME]            AS CONFIG_NAME
            ,T0.[PROTO_ID]
            ,T1.NAME              AS PROTO_NAME
            ,T0.[VIEW_ID]   
            ,T2.NAME              AS VIEW_NAME
            ,T0.[ACTIVE]
            ,CASE 
                  WHEN T1.NAME IN('GM_COLLECTION','VR_COLLECTION','IN_COLLECTION','NL') THEN T1.NAME
                  WHEN LEFT(T1.NAME,2) = 'GM' THEN 'GM'
                  WHEN LEFT(T1.NAME,2) = 'VR' THEN 'VR'
                  WHEN LEFT(T1.NAME,2) = 'IN' THEN 'IN'
                  END AS PROTO_CATEGORY
      FROM [DATATINO_PROTO_1].[CONFIGURATIONS]      AS T0
      LEFT JOIN DATATINO_PROTO_1.PROTOS             AS T1 ON T1.ID = T0.PROTO_ID
      LEFT JOIN DATATINO_PROTO_1.VIEWS              AS T2 ON T2.ID = T0.VIEW_ID 
)
,
GROUPED_VIEWS_CONFIGS_CTE AS (
    SELECT DISTINCT  --Only look at separate proto categories: no 350 lines for a single GM config due to multiple GM's
        CONFIG_NAME
        ,PROTO_CATEGORY
        ,VIEW_NAME
        ,ACTIVE
    FROM VIEWS_CONFIGS_CTE
)
,
VIEWS_SOURCES_CTE AS (
    --Determine the tables referenced in the views
      SELECT
            SCHEMA_NAME(v.schema_id)+'.'+ v.name AS VIEW_NAME
            --   ,v.*
            --   ,'|' AS [|]
            --   ,ed.*
            ,ed.referenced_schema_name+'.'+ed.referenced_entity_name AS VIEW_SOURCE

      FROM sys.views as v
      LEFT JOIN sys.sql_expression_dependencies as ed ON v.object_id = ed.referencing_id
      WHERE is_ambiguous=0 --do not consider functions
)
,
STACKED_VIEWS_SOURCES_CTE AS (
    --Views that are based on other views
    --Add NULLS in here such that views that all views have a separate line even when stacked views are joined.
    --This represents all views also having a config on their own instead of only linking to a stacked view
    SELECT 
            VIEW_NAME
           ,VIEW_SOURCE
        FROM  VIEWS_SOURCES_CTE
    UNION ALL
    SELECT 
            NULL AS VIEW_SOURCE
           ,VIEW_NAME
        FROM  VIEWS_SOURCES_CTE
)
,
SP_REFERENCED_CTE AS (
    --Determine the tables referenced in the stored procedure
    --In these sys tables no distinction is found between tables referenced with a 'FROM' or an 'INTO' clause
      SELECT 
            UPPER(SCHEMA_NAME(p.schema_id)+'.'+ p.name) AS SP_NAME
            ,ed.referenced_schema_name+'.'+ed.referenced_entity_name   AS REFERENCED_NAME
            -- ,p.*
            -- ,'|' AS [|]
            -- ,ed.*
      FROM sys.procedures as p
      LEFT JOIN sys.sql_expression_dependencies as ed ON p.object_id = ed.referencing_id
      WHERE ed.is_ambiguous = 0 --No funcitons
)
,
WORKFLOW_SOURCES_CTE AS (
    --Retrieve all sources per workflow
    SELECT 
        [SOURCE_CONTENT]
        ,T0.[NAME]        AS SOURCE_NAME
        ,T3.[NAME]        AS WORKFLOW_NAME
        ,T2.ID            AS WORKFLOW_ID
    FROM [DATATINO_ORCHESTRATOR_1].[SOURCES]            AS T0
    LEFT JOIN [DATATINO_ORCHESTRATOR_1].[PROCESSES]     AS T1 ON T1.SOURCE_ID = T0.ID 
    LEFT JOIN [DATATINO_ORCHESTRATOR_1].[WORKFLOWS]     AS T2 ON T2.ID = T1.WORKFLOW_ID
    LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]     AS T3 ON T3.ID = T2.DATAFLOW_ID
    WHERE SOURCE_TYPE_ID <> 1 -- SELECT all external sources
)
,
WORKFLOWS_SP_CTE AS (
    --Get all stored procedures in a workflow
      SELECT 
            UPPER(IIF(
                  LOWER(LEFT(REPLACE(REPLACE(T0.SOURCE_CONTENT,'[',''),']',''),3)) <> 'dbo',
                        'dbo.'+REPLACE(REPLACE(T0.SOURCE_CONTENT,'[',''),']',''),
                        REPLACE(REPLACE(T0.SOURCE_CONTENT,'[',''),']','')
            )) AS SP_NAME
            ,T3.NAME AS WORKFLOW_NAME
            ,T2.ID   AS WORKFLOW_ID
      FROM [DATATINO_ORCHESTRATOR_1].[SOURCES]AS T0
      LEFT JOIN [DATATINO_ORCHESTRATOR_1].[PROCESSES]     AS T1 ON T1.SOURCE_ID = T0.ID 
      LEFT JOIN [DATATINO_ORCHESTRATOR_1].[WORKFLOWS]     AS T2 ON T2.ID = T1.WORKFLOW_ID
      LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]     AS T3 ON T3.ID = T2.DATAFLOW_ID
      WHERE SOURCE_TYPE_ID =1 
)
,
TOTAL_CTE AS (
    --Combine everything
    -- Sources -> Workflows -> Stored Procedures -> Tables (later filtered only those with a view) -> Views -> Config
      SELECT 
            T0.[SOURCE_CONTENT]
            ,T0.SOURCE_NAME
            ,T0.WORKFLOW_NAME
            ,T0.WORKFLOW_ID
            ,T1.SP_NAME
            ,T2.REFERENCED_NAME AS TABLE_NAME


            ,COALESCE(T5.VIEW_NAME, T3.VIEW_NAME) AS VIEW_NAME --Look if stacked view is available, if not take other view
            -- ,T5.VIEW_NAME       AS STACKED_VIEW
            ,COALESCE(T6.CONFIG_NAME, T4.CONFIG_NAME) AS CONFIG_NAME --Look if stacked view is available, if not take other view
            ,COALESCE(T6.PROTO_CATEGORY, T4.PROTO_CATEGORY) AS PROTO_CATEGORY --Look if stacked view is available, if not take other view
            ,COALESCE(T6.ACTIVE, T4.ACTIVE) AS CONFIG_ACTIVE --Look if stacked view is available, if not take other view
      FROM WORKFLOW_SOURCES_CTE AS T0 -- Get workflows with their sources
      LEFT JOIN WORKFLOWS_SP_CTE AS T1 ON T0.WORKFLOW_ID = T1.WORKFLOW_ID -- Add Stored procedures
      LEFT JOIN SP_REFERENCED_CTE AS T2 ON T1.SP_NAME = T2.SP_NAME -- Add linked SP items (to retrieve tables from SP's)
      LEFT JOIN VIEWS_SOURCES_CTE AS T3 ON T3.VIEW_SOURCE = T2.REFERENCED_NAME -- Link views to tables
      LEFT JOIN GROUPED_VIEWS_CONFIGS_CTE AS T4 ON T4.VIEW_NAME = T3.VIEW_NAME -- Get configs on views sources

      LEFT JOIN STACKED_VIEWS_SOURCES_CTE AS T5 ON T3.VIEW_NAME = T5.VIEW_SOURCE -- Add stacked vies: views that are found on other views
      LEFT JOIN GROUPED_VIEWS_CONFIGS_CTE AS T6 ON T6.VIEW_NAME = T5.VIEW_NAME -- Get configs on stacked views

)


SELECT --*
        SOURCE_CONTENT
       ,SOURCE_NAME
       ,WORKFLOW_NAME
       ,SP_NAME
       ,TABLE_NAME
       ,VIEW_NAME
       ,CONFIG_NAME
       ,PROTO_CATEGORY
       ,CONFIG_ACTIVE

FROM TOTAL_CTE
-- All tables are returned that occur in a SP linked to a workflow
-- Many (for example stage) will not contain views
-- Some views won't have configs
-- Only existing configs remain using filter below.
WHERE CONFIG_NAME IS NOT NULL
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE OR ALTER  VIEW [DATATINO_ORCHESTRATOR_1].[V_H_WORKFLOWS] AS
SELECT A.NAME, B.ID, A.START_RUN, A.END_RUN, A.[STATUS]
FROM DATATINO_ORCHESTRATOR_1.H_DATAFLOWS A
         JOIN DATATINO_ORCHESTRATOR_1.WORKFLOWS B
              ON A.DATAFLOW_ID = B.DATAFLOW_ID
WHERE A.DATAFLOW_TYPE_ID = 1
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE OR ALTER   VIEW [DATATINO_ORCHESTRATOR_1].[V_H_PROCESSES] AS
SELECT A.NAME, B.ID, B.WORKFLOW_ID, A.START_RUN, A.END_RUN, A.[STATUS]
FROM DATATINO_ORCHESTRATOR_1.H_DATAFLOWS A
         JOIN DATATINO_ORCHESTRATOR_1.PROCESSES B
              ON A.DATAFLOW_ID = B.DATAFLOW_ID
WHERE A.DATAFLOW_TYPE_ID = 2

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE OR ALTER VIEW  [DATATINO_ORCHESTRATOR_1].[V_DEPENDENCIES] AS

SELECT 
       T0.[ID]
      ,T0.[NAME]
      ,T0.[DATAFLOW_ID]
      ,T4.NAME                              AS MAIN_NAME
      ,T0.[DATAFLOW_TYPE_ID]
      ,T5.NAME                              AS MAIN_TYPE
      ,TX.ID                                AS PROCESS_ID                            
      ,TY.SOURCE_CONTENT                    AS PROCESS_SOURCE

      ,T0.[DEPENDENCY_ID]
      ,T6.NAME                              AS DEPENDENCY_NAME
      ,T0.[DATAFLOW_TYPE_ID_DEPENDENCY]
      ,T7.NAME                              AS DEPENDENCY_TYPE
      ,TZ.ID                                AS DEPENDENCY_PROCESS_ID
      ,TW.SOURCE_CONTENT                    AS DEPENDENCY_SOURCE

      ,T0.[WORKFLOW_ID]
      ,T2.[NAME]                            AS WORKFLOW_NAME
      ,T0.[ACTIVE]
      ,T0.[DESCRIPTION]
  FROM [DATATINO_ORCHESTRATOR_1].[DEPENDENCIES] AS T0
  --WORKFLOW
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[WORKFLOWS]           AS T1 ON T0.WORKFLOW_ID = T1.ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]           AS T2 ON T2.ID = T1.DATAFLOW_ID

  --MAIN PROCESS
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]           AS T4 ON T4.ID = T0.DATAFLOW_ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES]      AS T5 ON T5.ID = T0.DATAFLOW_TYPE_ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[PROCESSES]           AS TX ON TX.DATAFLOW_ID = T4.ID AND TX.DATAFLOW_TYPE_ID = T5.ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[SOURCES]             AS TY ON TY.ID = TX.SOURCE_ID

  --DEPENDENCY PROCESS
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOWS]           AS T6 ON T6.ID = T0.DEPENDENCY_ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[DATAFLOW_TYPES]      AS T7 ON T7.ID = T0.DATAFLOW_TYPE_ID_DEPENDENCY
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[PROCESSES]           AS TZ ON TZ.DATAFLOW_ID = T6.ID AND TZ.DATAFLOW_TYPE_ID = T7.ID
  LEFT JOIN [DATATINO_ORCHESTRATOR_1].[SOURCES]             AS TW ON TW.ID = TZ.SOURCE_ID
GO

/* 

    STORED PROCEDURES

*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER PROCEDURE [DATATINO_ORCHESTRATOR_1].[UPSERT_SOURCE] (
    @id BIGINT NULL,
    @source_name VARCHAR(MAX),
    @description VARCHAR(MAX),
    @source VARCHAR(MAX),
    @source_columns VARCHAR(MAX),
    @target_columns VARCHAR(MAX),
    @target_name VARCHAR(MAX),
    @source_type VARCHAR(200),
    @location_type VARCHAR(200),
    @delimiter_type VARCHAR(200),
    @security_profile VARCHAR(200)
) AS
    DECLARE @source_type_id bigint = ( SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.SOURCE_TYPES WHERE [NAME] = @source_type)
    DECLARE @location_type_id bigint = ( SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.LOCATION_TYPES WHERE [NAME] = @location_type)
    DECLARE @delimiter_type_id bigint = ( SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.DELIMITER_TYPES WHERE [NAME] = @delimiter_type)
    DECLARE @sp_id bigint = ( SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.SECURITY_PROFILES WHERE [NAME] = @security_profile)
    IF @id IS NULL
    INSERT DATATINO_ORCHESTRATOR_1.SOURCES ([NAME], [DESCRIPTION], [SOURCE_CONTENT], [SOURCE_COLUMNS], 
    [TARGET_COLUMNS], [TARGET_NAME], [SOURCE_TYPE_ID], [LOCATION_TYPE_ID], [DELIMITER_TYPE_ID], [SP_ID]) 
    VALUES (
            @source_name,
            @description,
            @source,
            @source_columns,
            @target_columns,
            @target_name,
            @source_type_id,
            @location_type_id,
            @delimiter_type_id,
            @sp_id)
    ELSE
        UPDATE DATATINO_ORCHESTRATOR_1.SOURCES SET 
            [NAME] = @source_name, 
            [DESCRIPTION] = @description, 
            [SOURCE_CONTENT] = @source, 
            [SOURCE_COLUMNS] = @source_columns, 
            [TARGET_COLUMNS] = @target_columns, 
            [TARGET_NAME] = @target_name, 
            [SOURCE_TYPE_ID] = @source_type_id, 
            [LOCATION_TYPE_ID] = @location_type_id, 
            [DELIMITER_TYPE_ID] = @delimiter_type_id, 
            [SP_ID] = @sp_id
        WHERE ID = @id;
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER PROCEDURE [DATATINO_ORCHESTRATOR_1].[UPSERT_WORKFLOW] (
    @id BIGINT NULL,
    @workflow_name VARCHAR(200) NULL,
    @description VARCHAR(200) NULL,
    @schedule VARCHAR(100) NULL,
    @active BIGINT = 1
) AS
    IF @id IS NULL
    BEGIN
        INSERT DATATINO_ORCHESTRATOR_1.DATAFLOWS([NAME], [DESCRIPTION], [DATAFLOW_TYPE_ID])
            VALUES (
                @workflow_name,
                @description,
                1);

        INSERT DATATINO_ORCHESTRATOR_1.WORKFLOWS ([DATAFLOW_ID], [DATAFLOW_TYPE_ID], [SCHEDULE],  [ACTIVE] ) VALUES (
            (SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE [NAME] = @workflow_name),
            1,
            @schedule,
            @active);
    END
    ELSE
        IF @workflow_name IS NULL
            SET @workflow_name = (SELECT [NAME] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE ID = @id)
        IF @description IS NULL
            SET @description = (SELECT [DESCRIPTION] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE ID = @id)
        IF @schedule IS NULL
            SET @schedule = (SELECT [SCHEDULE] FROM DATATINO_ORCHESTRATOR_1.WORKFLOWS WHERE ID = @id)
        IF @active IS NULL
            SET @active = (SELECT [ACTIVE] FROM DATATINO_ORCHESTRATOR_1.WORKFLOWS WHERE ID = @id)
        UPDATE DATATINO_ORCHESTRATOR_1.WORKFLOWS SET 
            [SCHEDULE] = @schedule,
            [ACTIVE] = @active
        WHERE ID = @id

        UPDATE DATATINO_ORCHESTRATOR_1.DATAFLOWS SET
            [NAME] = @workflow_name,
            [DESCRIPTION] = @description
        WHERE ID = (SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE [NAME] = @workflow_name);
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER PROCEDURE [DATATINO_ORCHESTRATOR_1].[UPSERT_PROCESS] (
    @id BIGINT NULL,
    @process_name VARCHAR(MAX) NULL, 
    @description VARCHAR(MAX) NULL, 
    @source_name VARCHAR(MAX) NULL, 
    @schedule VARCHAR(MAX) NULL,
    @workflow_name VARCHAR(MAX) NULL, 
    @active INT = 1
) AS
    DECLARE @source_id bigint = ( SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.SOURCES WHERE [NAME] = @source_name)
    DECLARE @workflow_id bigint = ( SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.WORKFLOWS WHERE DATAFLOW_ID = (SELECT ID FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE [NAME] = @workflow_name))
    IF @id IS NULL
    BEGIN
        INSERT DATATINO_ORCHESTRATOR_1.DATAFLOWS([NAME], [DESCRIPTION], [DATAFLOW_TYPE_ID])
            VALUES (
                @process_name,
                @description,
                2);

        INSERT DATATINO_ORCHESTRATOR_1.PROCESSES ([DATAFLOW_ID], [DATAFLOW_TYPE_ID], [SOURCE_ID], [WORKFLOW_ID], [SCHEDULE],  [ACTIVE] ) VALUES (
            (SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE [NAME] = @process_name),
            2,
            @source_id,
            @workflow_id,
            @schedule,
            @active);
    END
    ELSE
        IF @process_name IS NULL
            SET @process_name = (SELECT [NAME] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE ID = (SELECT DATAFLOW_ID FROM DATATINO_ORCHESTRATOR_1.WORKFLOWS WHERE [ID] = @id))
        IF @description IS NULL
            SET @description = (SELECT [DESCRIPTION] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE ID = (SELECT DATAFLOW_ID FROM DATATINO_ORCHESTRATOR_1.WORKFLOWS WHERE [ID] = @id))
        IF @workflow_id IS NULL
            SET @workflow_id = (SELECT [WORKFLOW_ID] FROM DATATINO_ORCHESTRATOR_1.PROCESSES WHERE [ID] = @id)
        IF @source_id IS NULL
            SET @source_id = (SELECT [SOURCE_ID] FROM DATATINO_ORCHESTRATOR_1.PROCESSES WHERE [ID] = @id)
        IF @active IS NULL
            SET @active = (SELECT [ACTIVE] FROM DATATINO_ORCHESTRATOR_1.PROCESSES WHERE [ID] = @id)
        UPDATE DATATINO_ORCHESTRATOR_1.PROCESSES SET 
            [SOURCE_ID] = @source_id,
            [WORKFLOW_ID] = @workflow_id,
            [SCHEDULE] = @schedule,
            [ACTIVE] = @active
        WHERE ID = @id

        UPDATE DATATINO_ORCHESTRATOR_1.DATAFLOWS SET
            [NAME] = @process_name,
            [DESCRIPTION] = @description
        WHERE ID = (SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE [NAME] = @process_name);
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER PROCEDURE [DATATINO_ORCHESTRATOR_1].[UPSERT_DEPENDENCY] (
    @id BIGINT NULL,
    @dataflow_name VARCHAR(MAX) NULL,
    @dataflowtype_id INT NULL,
    @dependency_name VARCHAR(MAX) NULL,
    @dependencytype_id INT NULL,
    @workflow_name VARCHAR(MAX) NULL,
    @name VARCHAR(MAX) NULL,
    @description  VARCHAR(MAX) NULL,
    @active INT = 1
) AS
    DECLARE @dataflow_id bigint = ( SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE [NAME] = @dataflow_name)
    DECLARE @dependency_id bigint = ( SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE [NAME] = @dependency_name)
    DECLARE @workflow_id bigint = ( SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.WORKFLOWS WHERE DATAFLOW_ID = (SELECT [ID] FROM DATATINO_ORCHESTRATOR_1.DATAFLOWS WHERE [NAME] = @workflow_name))
    IF @id IS NULL
        INSERT DATATINO_ORCHESTRATOR_1.DEPENDENCIES ( [DATAFLOW_ID], [DATAFLOW_TYPE_ID], [DEPENDENCY_ID], [DATAFLOW_TYPE_ID_DEPENDENCY], [WORKFLOW_ID], [ACTIVE], [NAME], [DESCRIPTION] ) VALUES (
            @dataflow_id,
            @dataflowtype_id,
            @dependency_id,
            @dependencytype_id,
            @workflow_id,
            @active,
            @name,
            @description);
    ELSE
        IF @dataflow_name IS NULL
            SET @dataflow_id = (SELECT [DATAFLOW_ID] FROM DATATINO_ORCHESTRATOR_1.DEPENDENCIES WHERE ID = @id)
        IF @dataflowtype_id IS NULL
            SET @dataflowtype_id = (SELECT [DATAFLOW_TYPE_ID] FROM DATATINO_ORCHESTRATOR_1.DEPENDENCIES WHERE ID = @id)
        IF @dependency_name IS NULL
            SET @dependency_id = (SELECT [DEPENDENCY_ID] FROM DATATINO_ORCHESTRATOR_1.DEPENDENCIES WHERE ID = @id)
        IF @dependencytype_id IS NULL
            SET @dependencytype_id = (SELECT [DATAFLOW_TYPE_ID_DEPENDENCY] FROM DATATINO_ORCHESTRATOR_1.DEPENDENCIES WHERE ID = @id)
        IF @workflow_name IS NULL
            SET @workflow_id = (SELECT [WORKFLOW_ID] FROM DATATINO_ORCHESTRATOR_1.DEPENDENCIES WHERE ID = @id)
        IF @active IS NULL
            SET @active = (SELECT [ACTIVE] FROM DATATINO_ORCHESTRATOR_1.DEPENDENCIES WHERE ID = @id)
        IF @name IS NULL
            SET @name = (SELECT [NAME] FROM DATATINO_ORCHESTRATOR_1.DEPENDENCIES WHERE ID = @id)
        IF @description IS NULL
            SET @description = (SELECT [DESCRIPTION] FROM DATATINO_ORCHESTRATOR_1.DEPENDENCIES WHERE ID = @id)
        UPDATE DATATINO_ORCHESTRATOR_1.DEPENDENCIES SET 
            [DATAFLOW_ID] = @dataflow_id,
            [DATAFLOW_TYPE_ID] = @dataflowtype_id,
            [DEPENDENCY_ID] = @dependency_id,
            [DATAFLOW_TYPE_ID_DEPENDENCY] = @dependencytype_id,
            [WORKFLOW_ID] = @workflow_id,
            [NAME] = @name,
            [DESCRIPTION]= @description,
            [ACTIVE] = @active
        WHERE ID = @id;
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER PROCEDURE [DATATINO_PROTO_1].[UPSERT_PROTO](
    @id BIGINT NULL,
    @proto_name VARCHAR(200) NULL,
    @header_names VARCHAR(200) NULL,
    @header_values VARCHAR(200) NULL,
    @active INT = 1
) AS
IF @id IS NULL
    INSERT DATATINO_PROTO_1.PROTOS ([NAME], HEADER_NAMES, HEADER_VALUES, ACTIVE) 
    VALUES (@proto_name,
            @header_names,
            @header_values,
            @active);
ELSE
    IF @proto_name IS NULL
        SET @proto_name = (SELECT [NAME] FROM DATATINO_PROTO_1.PROTOS WHERE ID = @id)
    IF @header_names IS NULL
        SET @header_names = (SELECT HEADER_NAMES FROM DATATINO_PROTO_1.PROTOS WHERE ID = @id)
    IF @header_values IS NULL
        SET @header_values = (SELECT HEADER_VALUES FROM DATATINO_PROTO_1.PROTOS WHERE ID = @id)
    IF @active IS NULL
        SET @active = (SELECT ACTIVE FROM DATATINO_PROTO_1.PROTOS WHERE ID = @id)
    UPDATE DATATINO_PROTO_1.PROTOS SET 
        [NAME] = @proto_name,
        HEADER_NAMES = @header_names,
        HEADER_VALUES = @header_values,
        ACTIVE = @active
    WHERE ID = @id;
GO

CREATE OR ALTER PROCEDURE [DATATINO_PROTO_1].[UPSERT_VIEW](
    @id BIGINT NULL,
    @view_name VARCHAR(MAX),
    @description VARCHAR(MAX),
    @last_update_name VARCHAR(200),
    @constraint_key_name VARCHAR(MAX),
    @constraint_value VARCHAR(MAX),
    @grouped_key_name VARCHAR(MAX),
    @grouped_last_update_name VARCHAR(MAX)
) AS
    IF @id IS NULL
        INSERT DATATINO_PROTO_1.VIEWS ([NAME], LAST_UPDATE_NAME, CONSTRAINT_KEY_NAME, CONSTRAINT_VALUE, GROUPED_KEY_NAME, GROUPED_LAST_UPDATE_NAME, [DESCRIPTION]) 
        VALUES (TRIM(@view_name),
                @last_update_name,
                @constraint_key_name,
                @constraint_value,
                @grouped_key_name,
                @grouped_last_update_name,
                @description);
    ELSE
        IF @view_name IS NULL
                SET @view_name = (SELECT [NAME] FROM DATATINO_PROTO_1.VIEWS WHERE ID = @id)
        IF @last_update_name IS NULL
                SET @last_update_name = (SELECT LAST_UPDATE_NAME FROM DATATINO_PROTO_1.VIEWS WHERE ID = @id)
        IF @constraint_key_name IS NULL
                SET @constraint_key_name = (SELECT CONSTRAINT_KEY_NAME FROM DATATINO_PROTO_1.VIEWS WHERE ID = @id)
        IF @constraint_value IS NULL
                SET @constraint_value = (SELECT CONSTRAINT_VALUE FROM DATATINO_PROTO_1.VIEWS WHERE ID = @id)
        IF @grouped_key_name IS NULL
                SET @grouped_key_name = (SELECT GROUPED_KEY_NAME FROM DATATINO_PROTO_1.VIEWS WHERE ID = @id)
        IF @grouped_last_update_name IS NULL
                SET @grouped_last_update_name = (SELECT GROUPED_LAST_UPDATE_NAME FROM DATATINO_PROTO_1.VIEWS WHERE ID = @id)
        IF @description IS NULL
                SET @description = (SELECT [DESCRIPTION] FROM DATATINO_PROTO_1.VIEWS WHERE ID = @id)
        UPDATE DATATINO_PROTO_1.VIEWS SET 
            [NAME] = TRIM(@view_name),
            LAST_UPDATE_NAME = @last_update_name,
            CONSTRAINT_KEY_NAME = @constraint_key_name,
            CONSTRAINT_VALUE = @constraint_value,
            GROUPED_KEY_NAME = @grouped_key_name,
            GROUPED_LAST_UPDATE_NAME = @grouped_last_update_name,
            [DESCRIPTION] = @description
        WHERE ID = @id;
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER  PROCEDURE [DATATINO_PROTO_1].[UPSERT_CONFIGURATION](
    @id BIGINT NULL,
    @proto_name VARCHAR(MAX) NULL,
    @description VARCHAR(MAX) NULL,
    @view_name VARCHAR(MAX) NULL,
    @item_name VARCHAR(MAX) NULL, 
    @constrained BIGINT NULL, 
    @grouped BIGINT NULL, 
    @columns VARCHAR(MAX) NULL,
    @mapping VARCHAR(MAX) NULL,
    @layout_type_id BIGINT NULL,
    @active BIGINT
) AS
DECLARE @proto_id bigint = ( SELECT ID FROM DATATINO_PROTO_1.PROTOS WHERE [NAME] = @proto_name)
DECLARE @view_id bigint = ( SELECT ID FROM DATATINO_PROTO_1.VIEWS WHERE [NAME] = @view_name AND ISNULL(CONSTRAINT_VALUE,'X') IN (@proto_name, 'X') )
IF @id IS NULL
    INSERT INTO DATATINO_PROTO_1.CONFIGURATIONS(PROTO_ID, [NAME], [DESCRIPTION], [VIEW_ID], [CONSTRAINED], [GROUPED], [COLUMNS], [MAPPING], [LAYOUT_TYPE_ID], [ACTIVE]) 
    VALUES (
        @proto_id,
        @item_name,
        @description,
        @view_id, 
        @constrained, 
        @grouped, 
        @columns,
        @mapping, 
        @layout_type_id, 
        @active)
ELSE
    IF @proto_name IS NULL
        SET @proto_id = (SELECT PROTO_ID FROM DATATINO_PROTO_1.CONFIGURATIONS WHERE ID = @id)
    IF @item_name IS NULL
        SET @item_name = (SELECT [NAME] FROM DATATINO_PROTO_1.CONFIGURATIONS WHERE ID = @id)
    if @description IS NULL
        SET @description = (SELECT [DESCRIPTION] FROM DATATINO_PROTO_1.CONFIGURATIONS WHERE ID = @id)
    IF @view_name IS NULL
        SET @view_id = (SELECT VIEW_ID FROM DATATINO_PROTO_1.CONFIGURATIONS WHERE ID = @id)
    IF @constrained IS NULL
        SET @constrained = (SELECT [CONSTRAINED] FROM DATATINO_PROTO_1.CONFIGURATIONS  WHERE ID = @id)
    IF @grouped IS NULL
        SET @grouped = (SELECT GROUPED FROM DATATINO_PROTO_1.CONFIGURATIONS  WHERE ID = @id)
    IF @layout_type_id IS NULL
        SET @layout_type_id = (SELECT LAYOUT_TYPE_ID FROM DATATINO_PROTO_1.CONFIGURATIONS WHERE ID = @id)
    IF @mapping IS NULL
        SET @mapping = (SELECT MAPPING FROM DATATINO_PROTO_1.CONFIGURATIONS WHERE ID = @id)
    IF @columns IS NULL
        SET @columns = (SELECT COLUMNS FROM DATATINO_PROTO.PROTO_CONFIGURATIONS WHERE ID = @id)
    IF @active IS NULL
        SET @active = (SELECT ACTIVE FROM DATATINO_PROTO.PROTO_CONFIGURATIONS WHERE ID = @id)

    UPDATE DATATINO_PROTO_1.CONFIGURATIONS 
    SET PROTO_ID = @proto_id,
        [NAME] = @item_name,
        [DESCRIPTION] = @description,
        VIEW_ID = @view_id,
        [CONSTRAINED] = @constrained,
        GROUPED = @grouped,
        LAYOUT_TYPE_ID = @layout_type_id,
        COLUMNS = @columns,
        ACTIVE = @active,
        MAPPING = @mapping
    WHERE ID = @id;
GO