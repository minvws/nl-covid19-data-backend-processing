-- Copyright (c) 2020 De Staat der Nederlanden, Ministerie van   Volksgezondheid, Welzijn en Sport.
-- Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2 - see https://github.com/minvws/nl-contact-tracing-app-coordinationfor more information.

CREATE   VIEW VWSREPORT.V_PERCENTAGE_POSITIVE_PER_SMALL_AGE_GROUP AS
WITH BASE_CTE AS (
SELECT 
 T1.DATE_FILE
, DATE_LAST_INSERTED
, CAST(CASE AGEGROUP
 WHEN '<50' THEN 'Unknown'
 ELSE AGEGROUP
 END AS VARCHAR(100)) AS [AGEGROUP]
, 1 AS [NUMBER_OF_INFECTED]
FROM VWSINTER.RIVM_COVID_19_CASE_NATIONAL T1
-- Inner join to only select the max DATE_LAST_INSERTED per DATE_FILE
-- Keep only the last insertions per DATE_FILE (delivery day from RIVM)
INNER JOIN (SELECT DATE_FILE, MAX(DATE_LAST_INSERTED) AS [MAX_DATE_LAST_INSERTED] FROM VWSINTER.RIVM_COVID_19_CASE_NATIONAL GROUP BY DATE_FILE) T2 
ON T1.DATE_FILE = T2.DATE_FILE AND T1.DATE_LAST_INSERTED = T2.[MAX_DATE_LAST_INSERTED]
UNION ALL
SELECT 
 T3.DATE_FILE
, DATE_LAST_INSERTED
, CAST(CASE AGEGROUP
 WHEN '<50' THEN 'Unknown'
 ELSE AGEGROUP
 END AS VARCHAR(100)) AS [AGEGROUP]
, 1 AS [NUMBER_OF_INFECTED]
FROM VWSARCHIVE.RIVM_COVID_19_CASE_NATIONAL_ARCHIVE_INTER T3
-- Inner join to only select the max DATE_LAST_INSERTED per DATE_FILE
-- Keep only the last insertions per DATE_FILE (delivery day from RIVM)
INNER JOIN (SELECT DATE_FILE, MAX(DATE_LAST_INSERTED) AS [MAX_DATE_LAST_INSERTED] FROM VWSARCHIVE.RIVM_COVID_19_CASE_NATIONAL_ARCHIVE_INTER GROUP BY DATE_FILE) T4
ON T3.DATE_FILE = T4.DATE_FILE AND T3.DATE_LAST_INSERTED = T4.[MAX_DATE_LAST_INSERTED]
AND T3.DATE_FILE NOT IN (SELECT DISTINCT DATE_FILE FROM VWSINTER.RIVM_COVID_19_CASE_NATIONAL)
)
 
-- The second CTE adds logic to calculate the number of infected per age group and per day. Three columns are calculated: number of infected, number of infected for previous day and increase based on difference between the two dates. 
, SECOND_CTE AS (
SELECT 
 DATE_FILE 
, DATE_LAST_INSERTED
, AGEGROUP
, SUM(NUMBER_OF_INFECTED) AS [NUMBER_OF_INFECTED]
, LAG (SUM(NUMBER_OF_INFECTED),1) OVER (PARTITION BY AGEGROUP ORDER BY AGEGROUP, DATE_FILE ASC) AS [NUMBER_OF_INFECTED_PREVIOUS_DAY]
, ISNULL(SUM(NUMBER_OF_INFECTED) - LAG (SUM(NUMBER_OF_INFECTED),1) OVER (PARTITION BY AGEGROUP ORDER BY AGEGROUP, DATE_FILE ASC), 0) AS [INCREASE_OF_INFECTED]
FROM BASE_CTE
GROUP BY DATE_FILE, AGEGROUP, DATE_LAST_INSERTED)
 
-- Final select and insert into statement, where only the max date is filtered out using an inner join on the max date. 
SELECT 
 DATE_FILE AS [DATE_OF_REPORT]
, T1.AGEGROUP
, INCREASE_OF_INFECTED AS INFECTED_INCREASE_DAILY
, NUMBER_OF_INFECTED AS INFECTED_CUMMULATIVE
, CASE WHEN INCREASE_OF_INFECTED != 0 THEN (CAST(INCREASE_OF_INFECTED AS FLOAT)/ SUM(INCREASE_OF_INFECTED) OVER (PARTITION BY DATE_FILE)) * 100 ELSE 0 END AS PERCENTAGE
, DATE_LAST_INSERTED
FROM SECOND_CTE T1