-- Copyright (c) 2020 De Staat der Nederlanden, Ministerie van   Volksgezondheid, Welzijn en Sport. 
-- Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2 - see https://github.com/minvws/nl-contact-tracing-app-coordinationfor more information.

CREATE   PROCEDURE [dbo].[SP_RESULTS_PER_REGION]
AS
BEGIN
-- Move municipal data from intermediate table to destination table. 
-- Base CTE (Common Table Expression) is the first selection on the source table on which two extra tables are joined to get residents per safety region. The result is filtered by max datelastinserted. 

WITH AGEGROUP_POPULATION_DATERANGE AS (
SELECT 
     [VR_CODE]
	,DATUM_PEILING AS DATE_FROM
    -- 2100-01-01 is used as convention for the most recent versions as no end date is known yet.
    ,ISNULL(LEAD(DATUM_PEILING,1) OVER (PARTITION BY [VR_CODE] ORDER BY [DATUM_PEILING] ASC),CAST('2100-01-01' AS DATE)) AS DATE_TO
	,POPULATIE AS [POPULATION]
FROM [VWSSTATIC].[CBS_POPULATION_VR]
WHERE DATE_LAST_INSERTED = (SELECT MAX(DATE_LAST_INSERTED) FROM VWSSTATIC.CBS_POPULATION_VR)--Determine ranges in which population numbers should be used
) 
,
BASE_CTE AS (
SELECT 
	DATE_OF_PUBLICATION AS DATE_OF_REPORT
,	SECURITY_REGION_CODE AS VRCODE
,	MUNICIPALITY_CODE AS GMCODE
,	TOTAL_REPORTED
,	HOSPITAL_ADMISSION
,	DECEASED
,	T1.[POPULATION]
,	T0.DATE_LAST_INSERTED
FROM VWSINTER.RIVM_COVID_19_NUMBER_MUNICIPALITY T0
LEFT JOIN AGEGROUP_POPULATION_DATERANGE T1 
    ON  T0.SECURITY_REGION_CODE = T1.[VR_CODE]
    AND (T0.DATE_OF_PUBLICATION >= T1.DATE_FROM AND T0.DATE_OF_PUBLICATION < T1.DATE_TO)
WHERE T0.DATE_LAST_INSERTED = (SELECT MAX(DATE_LAST_INSERTED) FROM VWSINTER.RIVM_COVID_19_NUMBER_MUNICIPALITY)

)

-- The second CTE uses the BASE_CTE as source and adds a calculation of [reported per region per 100000] and a total of [hospital admission]. It is grouped by report date and VRCODE. 
-- The start of the week range ending on date_of_report is also determined.
,	SECOND_CTE AS (
SELECT
    DATE_OF_REPORT
,   DATE_LAST_INSERTED
,   VRCODE
,   SUM(TOTAL_REPORTED) AS [TOTAL_REPORTED]
,   SUM(CAST(TOTAL_REPORTED AS FLOAT))/(CAST([POPULATION] AS decimal(10,2))/CAST(100000 AS decimal(10,2))) AS [REPORTED_PER_REGION_100000]
,   SUM(CAST(HOSPITAL_ADMISSION AS FLOAT)) AS [HOSPITAL_ADMISSION_PER_REGION]
,   [POPULATION]
,   LAG ([POPULATION] ,6)     OVER (PARTITION BY VRCODE ORDER BY DATE_OF_REPORT ASC)  						AS [POPULATION_RANGE_START]
,   LAG ([POPULATION] ,7)     OVER (PARTITION BY VRCODE ORDER BY DATE_OF_REPORT ASC)  						AS [POPULATION_RANGE_START_LAG]
,   SUM(DECEASED) AS DECEASED
,   LAG ([DATE_OF_REPORT] ,6)               OVER (PARTITION BY VRCODE ORDER BY [DATE_OF_REPORT] ASC)  		as [DATE_RANGE_START]
,	LAG ([DATE_OF_REPORT] ,7) 				OVER (PARTITION BY VRCODE ORDER BY DATE_OF_REPORT ASC)    		as [DATE_RANGE_START_LAG]
FROM BASE_CTE
GROUP BY DATE_LAST_INSERTED, DATE_OF_REPORT, VRCODE, [POPULATION]
)
,
CALCULATED_CTE AS (
SELECT
    T_SECOND.DATE_OF_REPORT
,	dbo.CONVERT_DATETIME_TO_UNIX(T_SECOND.DATE_OF_REPORT) AS [DATE_OF_REPORT_UNIX]
,	T_SECOND.VRCODE
,   TOTAL_REPORTED AS TOTAL_REPORTED_INCREASE_PER_REGION
,   (SUM(TOTAL_REPORTED) OVER (
			PARTITION BY T_SECOND.DATE_LAST_INSERTED, T_SECOND.VRCODE 
			ORDER BY T_SECOND.DATE_OF_REPORT ASC)) 
		/ (CAST([POPULATION] AS FLOAT)/100000.0) AS ROUNDED_REPORTED_PER_REGION_100000
,   SUM(HOSPITAL_ADMISSION_PER_REGION) OVER (
			PARTITION BY T_SECOND.DATE_LAST_INSERTED, T_SECOND.VRCODE 
			ORDER BY T_SECOND.DATE_OF_REPORT ASC) AS HOSPITAL_ADMISSION_PER_REGION
,	REPORTED_PER_REGION_100000 AS INCREASE_INFECTED_PER_100000
,	HOSPITAL_ADMISSION_PER_REGION AS INCREASE_HOSPITAL
,	AVG(CAST(HOSPITAL_ADMISSION_PER_REGION AS FLOAT)) OVER (
			PARTITION BY T_SECOND.DATE_LAST_INSERTED,VRCODE 
			ORDER BY T_SECOND.DATE_OF_REPORT ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as [MOVING_AVERAGE_HOSPITAL]
,   DECEASED

-- Reported per 100000 over the last seven days including today. Do only report when there are seven days that can be totaled.
,   (SUM(TOTAL_REPORTED) OVER (
			PARTITION BY T_SECOND.DATE_LAST_INSERTED, T_SECOND.VRCODE 
			ORDER BY T_SECOND.DATE_OF_REPORT ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)) 
        / (CAST(POPULATION_RANGE_START AS FLOAT)/100000.0) AS ROUNDED_REPORTED_PER_REGION_100000_LAST_WEEK

,   DATE_RANGE_START
,	[DATE_RANGE_START_LAG]

,	AVG(CAST(ROUND(TOTAL_REPORTED, 1) AS FLOAT)) OVER (
			PARTITION BY T_SECOND.DATE_LAST_INSERTED, T_SECOND.VRCODE 
			ORDER BY T_SECOND.DATE_OF_REPORT ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)
		/(CAST(POPULATION_RANGE_START AS FLOAT)/100000.0) AS [7D_AVERAGE_INCREASE_INFECTED_PER_100000]
,	AVG(CAST(ROUND(TOTAL_REPORTED, 1) AS FLOAT)) OVER (
			PARTITION BY T_SECOND.DATE_LAST_INSERTED, T_SECOND.VRCODE 
			ORDER BY T_SECOND.DATE_OF_REPORT ASC ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING)
		/(CAST(POPULATION_RANGE_START_LAG AS FLOAT)/100000.0) AS [7D_AVERAGE_INCREASE_INFECTED_PER_100000_LAG]

--Average of total infections(absolute). Used to calculate difference
,	AVG(CAST(ROUND(TOTAL_REPORTED, 1) AS FLOAT)) OVER (
			PARTITION BY T_SECOND.DATE_LAST_INSERTED, T_SECOND.VRCODE 
			ORDER BY T_SECOND.DATE_OF_REPORT ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)
		AS [7D_AVERAGE_INFECTED_DAILY_INCREASE_ABSOLUTE]

		
            --Additional data
            ,[POPULATION_RANGE_START]
            ,[POPULATION_RANGE_START_LAG]

FROM SECOND_CTE AS T_SECOND
)
-- Final select and insert into statement. This part adds the calculation of a moving average of increased hospital admissions and cumulative calculations. It calculates it based on the previous 2 days as can be seen in row 59, after BETWEEN. 
INSERT INTO VWSDEST.RESULTS_PER_REGION
(DATE_OF_REPORT, DATE_OF_REPORT_UNIX, VRCODE, TOTAL_REPORTED_INCREASE_PER_REGION, INFECTED_TOTAL_COUNTS_PER_REGION, HOSPITAL_TOTAL_COUNTS_PER_REGION, INFECTED_INCREASE_PER_REGION, HOSPITAL_INCREASE_PER_REGION, HOSPITAL_MOVING_AVG_PER_REGION, DECEASED, ROUNDED_REPORTED_PER_REGION_100000_LAST_WEEK, DATE_RANGE_START, DATE_RANGE_START_LAG, [7D_AVERAGE_INCREASE_INFECTED_PER_100000], [7D_AVERAGE_INCREASE_INFECTED_PER_100000_LAG],[7D_AVERAGE_INFECTED_DAILY_INCREASE_ABSOLUTE])


SELECT 
    DATE_OF_REPORT
,	[DATE_OF_REPORT_UNIX]
,	VRCODE
,   ROUND(TOTAL_REPORTED_INCREASE_PER_REGION, 1)			AS TOTAL_REPORTED_INCREASE_PER_REGION
,	ROUND(ROUNDED_REPORTED_PER_REGION_100000,2)				AS ROUNDED_REPORTED_PER_REGION_100000
,	HOSPITAL_ADMISSION_PER_REGION
,	ROUND(INCREASE_INFECTED_PER_100000,1)					INCREASE_INFECTED_PER_100000
,	INCREASE_HOSPITAL
,	ROUND([MOVING_AVERAGE_HOSPITAL],1)						AS [MOVING_AVERAGE_HOSPITAL]
,	DECEASED
,	ROUND(ROUNDED_REPORTED_PER_REGION_100000_LAST_WEEK, 0)	AS ROUNDED_REPORTED_PER_REGION_100000_LAST_WEEK
,	DATE_RANGE_START
,	DATE_RANGE_START_LAG
,   CASE WHEN
			DATE_OF_REPORT <  DATEADD(day, 6,'2020-03-02') THEN NULL
			ELSE ROUND([7D_AVERAGE_INCREASE_INFECTED_PER_100000]		,1)	
		END AS [7D_AVERAGE_INCREASE_INFECTED_PER_100000]

,	CASE WHEN 
			DATE_OF_REPORT <  DATEADD(day, 7,'2020-03-02') THEN NULL
			ELSE ROUND([7D_AVERAGE_INCREASE_INFECTED_PER_100000_LAG]	,1)	
			
		END AS [7D_AVERAGE_INCREASE_INFECTED_PER_100000_LAG]
,	CASE WHEN 
			DATE_OF_REPORT <  DATEADD(day, 6,'2020-03-02') THEN NULL
			ELSE ROUND([7D_AVERAGE_INFECTED_DAILY_INCREASE_ABSOLUTE]	,1)	
		END AS [7D_AVERAGE_INFECTED_DAILY_INCREASE_ABSOLUTE]

FROM CALCULATED_CTE
END;