-- Copyright (c) 2020 De Staat der Nederlanden, Ministerie van   Volksgezondheid, Welzijn en Sport. 
 -- Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2 - see https://github.com/minvws/nl-contact-tracing-app-coordinationfor more information.
 
 CREATE   PROCEDURE [dbo].[SP_NICE_HOSPITAL_VR]
 AS
 BEGIN
 WITH BASE_CTE AS (
 	SELECT
 		DATE_OF_STATISTICS
 	,	SECURITY_REGION_CODE
 	,	SUM(HOSPITALIZED) AS HOSPITALIZED
 	,	SUM(REPORTED) AS REPORTED
 	FROM VWSINTER.NICE_HOSPITAL
 	WHERE SECURITY_REGION_CODE!='NA'
 	AND DATE_LAST_INSERTED=(SELECT MAX(DATE_LAST_INSERTED) FROM VWSINTER.NICE_HOSPITAL)
 	GROUP BY SECURITY_REGION_CODE, DATE_OF_STATISTICS
 )
 ,
 AGEGROUP_POPULATION_DATERANGE AS (
 SELECT 
      [VR_CODE]
 	,DATUM_PEILING AS DATE_FROM
     -- 2100-01-01 is used as convention for the most recent versions as no end date is known yet.
     ,ISNULL(LEAD(DATUM_PEILING,1) OVER (PARTITION BY [VR_CODE] ORDER BY [DATUM_PEILING] ASC),CAST('2100-01-01' AS DATE)) AS DATE_TO
 	,CAST(POPULATIE AS FLOAT) AS [POPULATION]
 FROM [VWSSTATIC].[CBS_POPULATION_VR]
 WHERE DATE_LAST_INSERTED = (SELECT MAX(DATE_LAST_INSERTED) FROM VWSSTATIC.CBS_POPULATION_VR)--Determine ranges in which population numbers should be used
 ) 
 ,CALCULATED_CTE AS (
 	SELECT
 		DATE_OF_STATISTICS
 	,	SECURITY_REGION_CODE
 	,	VRNAAM AS VR_NAME
 	,	HOSPITALIZED
 	,	REPORTED
 	,	AVG(CAST([HOSPITALIZED] AS FLOAT)) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY DATE_OF_STATISTICS ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as HOSPITALIZED_3D_AVG
 	,	AVG(CAST([REPORTED] AS FLOAT)) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY DATE_OF_STATISTICS ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as REPORTED_3D_AVG
 	,   (SUM(HOSPITALIZED) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY DATE_OF_STATISTICS ASC)) AS HOSPITALIZED_CUMULATIVE
 	,   (SUM(REPORTED) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY DATE_OF_STATISTICS ASC)) AS REPORTED_CUMULATIVE
 	,   HOSPITALIZED/(T1.[POPULATION]/100000.0) AS HOSPITALIZED_PER_100000
 
 	-- Reported per 1000000 over the last seven days including today. Do only report when there are seven days that can be totaled.
 	,  SUM(REPORTED) OVER  (PARTITION BY SECURITY_REGION_CODE ORDER BY [DATE_OF_STATISTICS] ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)
 			/(T1.[POPULATION]/1000000.0) AS REPORTED_PER_MIL_LAST_WEEK
 	,   LAG ([DATE_OF_STATISTICS] ,6) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY [DATE_OF_STATISTICS] ASC) WEEK_START
 	,   LAG ([DATE_OF_STATISTICS] ,7) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY [DATE_OF_STATISTICS] ASC) WEEK_START_LAG
 	-- 7d average
 	,	AVG(CAST([HOSPITALIZED] AS FLOAT)) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY DATE_OF_STATISTICS ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as HOSPITALIZED_7D_AVG
 	,	AVG(CAST([HOSPITALIZED] AS FLOAT)) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY DATE_OF_STATISTICS ASC ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) as HOSPITALIZED_7D_AVG_LAG
 	,	AVG(CAST([REPORTED] AS FLOAT)) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY DATE_OF_STATISTICS ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as REPORTED_7D_AVG
 	,	AVG(CAST([REPORTED] AS FLOAT)) OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY DATE_OF_STATISTICS ASC ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) as REPORTED_7D_AVG_LAG
 
     -- Additional data
     ,T1.[POPULATION]
 
 	FROM BASE_CTE T0
 
     --Get population at weekstart
     LEFT JOIN AGEGROUP_POPULATION_DATERANGE T1 
         ON  T0.SECURITY_REGION_CODE = T1.[VR_CODE]
         AND (DATEADD(DAY, -6, T0.DATE_OF_STATISTICS)>= T1.DATE_FROM AND DATEADD(DAY, -6, T0.DATE_OF_STATISTICS) < T1.DATE_TO)
 
     -- Retrieve the correct region name
 	LEFT JOIN (
 		SELECT VRCODE, VRNAAM FROM [VWSSTATIC].[SAFETY_REGIONS_PER_MUNICIPAL]
 		WHERE DATE_LAST_INSERTED=(SELECT MAX(DATE_LAST_INSERTED) FROM [VWSSTATIC].[SAFETY_REGIONS_PER_MUNICIPAL])
 		group by VRCODE, VRNAAM
 	) AS T2 ON SECURITY_REGION_CODE=T2.VRCODE
 )
 
 ,RANK_TABLE AS (
     SELECT
         DATE_OF_STATISTICS
         ,SECURITY_REGION_CODE
         ,VR_NAME
         ,HOSPITALIZED
         ,REPORTED
         ,HOSPITALIZED_3D_AVG
         ,REPORTED_3D_AVG
         ,HOSPITALIZED_CUMULATIVE
         ,REPORTED_CUMULATIVE
         ,HOSPITALIZED_PER_100000
            ,IIF(WEEK_START IS NULL, NULL, REPORTED_PER_MIL_LAST_WEEK) AS REPORTED_PER_MIL_LAST_WEEK
            ,WEEK_START
            ,IIF(WEEK_START IS NULL, NULL, ROUND(HOSPITALIZED_7D_AVG,1)) AS HOSPITALIZED_7D_AVG
            ,IIF(WEEK_START IS NULL, NULL, ROUND(REPORTED_7D_AVG,1)) AS REPORTED_7D_AVG
            ,WEEK_START_LAG
            ,IIF(WEEK_START_LAG IS NULL, NULL, ROUND(HOSPITALIZED_7D_AVG_LAG,1)) AS HOSPITALIZED_7D_AVG_LAG
            ,IIF(WEEK_START_LAG IS NULL, NULL, ROUND(REPORTED_7D_AVG_LAG,1)) AS REPORTED_7D_AVG_LAG
            ,ROW_NUMBER() OVER (PARTITION BY SECURITY_REGION_CODE ORDER BY DATE_OF_STATISTICS DESC) AS RANK_DATE
     FROM CALCULATED_CTE
 )
 
 INSERT INTO VWSDEST.NICE_HOSPITAL_VR(
 	DATE_OF_STATISTICS
 ,	VR_CODE
 ,	VR_NAME
 ,	HOSPITALIZED
 ,	REPORTED
 ,	HOSPITALIZED_3D_AVG
 ,	REPORTED_3D_AVG
 ,	HOSPITALIZED_CUMULATIVE
 ,	REPORTED_CUMULATIVE
 ,   HOSPITALIZED_PER_100000
 ,	REPORTED_PER_MIL_LAST_WEEK
 ,	WEEK_START
 ,   HOSPITALIZED_7D_AVG
 ,   REPORTED_7D_AVG
 ,   WEEK_START_LAG
 ,   HOSPITALIZED_7D_AVG_LAG
 ,   REPORTED_7D_AVG_LAG
 ,   HOSPITALIZED_7D_AVG_CUTOFF
 )
 SELECT
         DATE_OF_STATISTICS
        ,SECURITY_REGION_CODE
        ,VR_NAME
        ,HOSPITALIZED
        ,REPORTED
        ,HOSPITALIZED_3D_AVG
        ,REPORTED_3D_AVG
        ,HOSPITALIZED_CUMULATIVE
        ,REPORTED_CUMULATIVE
        ,HOSPITALIZED_PER_100000
        ,REPORTED_PER_MIL_LAST_WEEK
        ,WEEK_START
        ,HOSPITALIZED_7D_AVG
        ,REPORTED_7D_AVG
        ,WEEK_START_LAG
        ,HOSPITALIZED_7D_AVG_LAG
        ,REPORTED_7D_AVG_LAG
        ,IIF(RANK_DATE>4,HOSPITALIZED_7D_AVG,NULL) AS HOSPITALIZED_7D_AVG_CUTOFF
 FROM RANK_TABLE
 
 END