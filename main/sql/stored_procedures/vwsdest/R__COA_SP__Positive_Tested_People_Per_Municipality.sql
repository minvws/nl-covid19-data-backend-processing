-- Copyright (c) 2020 De Staat der Nederlanden, Ministerie van   Volksgezondheid, Welzijn en Sport. 
-- Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2 - see https://github.com/minvws/nl-contact-tracing-app-coordinationfor more information.

CREATE  OR ALTER  PROCEDURE [dbo].[SP_POSITIVE_TESTED_PEOPLE_PER_MUNICIPALITY]
AS
BEGIN
-- Move positively tested persons data from intermediate table to destination table. 
-- Main select and insert statement for people tested positively. Calculation per date of report.  
 WITH BASE_CTE AS (
        SELECT
            DATE_OF_PUBLICATION AS DATE_OF_REPORT,
            dbo.CONVERT_DATETIME_TO_UNIX(DATE_OF_PUBLICATION) AS DATE_OF_REPORT_UNIX,
            TOTAL_REPORTED AS INCREASE_ABSOLUTE,
            MUNICIPALITY_CODE,
			MUNICIPALITY_NAME
        FROM
            VWSINTER.RIVM_COVID_19_NUMBER_MUNICIPALITY
        WHERE DATE_LAST_INSERTED = (SELECT MAX(DATE_LAST_INSERTED) from VWSINTER.RIVM_COVID_19_NUMBER_MUNICIPALITY)
            AND DATE_OF_PUBLICATION > '1900-01-01 00:00:00.000'
			AND MUNICIPALITY_CODE != ''
   )

, TOTALS_CTE AS (
    SELECT 
         DATE_OF_REPORT
        ,DATE_OF_REPORT_UNIX
		,MUNICIPALITY_CODE
		,MUNICIPALITY_NAME
        ,SUM(CAST(INCREASE_ABSOLUTE AS FLOAT)) AS [INCREASE_ABSOLUTE]
        --calculate the infected inhabitants in the region per 100k
        ,SUM(CAST(INCREASE_ABSOLUTE AS FLOAT))/dbo.NORMALIZATION(CAST(c.INHABITANTS AS FLOAT)) AS [INCREASE]    
		,LAG ([DATE_OF_REPORT] ,6) OVER (ORDER BY DATE_OF_REPORT ASC)  AS [DATE_RANGE_START]
		,LAG (DATE_OF_REPORT ,1)   OVER (ORDER BY DATE_OF_REPORT ASC)  AS [DATE_OF_REPORTS_LAG]
		,LAG (DATE_OF_REPORT ,7)   OVER (ORDER BY DATE_OF_REPORT ASC)  AS [DATE_RANGE_START_LAG]
    FROM BASE_CTE T1
	LEFT JOIN VWSSTATIC.INHABITANTS_PER_MUNICIPALITY c
               ON T1.MUNICIPALITY_CODE = c.GMCODE
			   AND c.DATE_LAST_INSERTED = (SELECT MAX(DATE_LAST_INSERTED) FROM VWSSTATIC.INHABITANTS_PER_MUNICIPALITY)
	    GROUP BY DATE_OF_REPORT_UNIX, DATE_OF_REPORT, MUNICIPALITY_CODE, MUNICIPALITY_NAME , INHABITANTS
		) 	


	INSERT INTO VWSDEST.POSITIVE_TESTED_PEOPLE_PER_MUNICIPALITY
        (
            DATE_OF_REPORT,
            DATE_OF_REPORT_UNIX,
            MUNICIPALITY_CODE,
			MUNICIPALITY_NAME,
			INFECTED_DAILY_TOTAL,
			INFECTED_DAILY_INCREASE,
			[DATE_RANGE_START],
		    [DATE_OF_REPORTS_LAG],
		    [DATE_RANGE_START_LAG],
	        [7D_AVERAGE_INFECTED_DAILY_INCREASE_TOTAL],
            [7D_AVERAGE_INFECTED_DAILY_INCREASE_LAG],
            [7D_AVERAGE_INFECTED_DAILY_INCREASE_ABSOLUTE]
        )
        SELECT
            DATE_OF_REPORT,
            DATE_OF_REPORT_UNIX,
			MUNICIPALITY_CODE,
			MUNICIPALITY_NAME,
            INCREASE_ABSOLUTE AS INFECTED_DAILY_TOTAL,
			INCREASE AS INFECTED_DAILY_INCREASE,
			IIF(DATE_OF_REPORT < DATEADD(day, 6,CAST('2020-03-02' as datetime)), NULL, [DATE_RANGE_START]) AS [DATE_RANGE_START],
		    [DATE_OF_REPORTS_LAG],
		    IIF(DATE_OF_REPORT < DATEADD(day, 7,CAST('2020-03-02' as datetime)), NULL, [DATE_RANGE_START_LAG]) AS [DATE_RANGE_START_LAG],
			CASE WHEN
				DATE_OF_REPORT <  DATEADD(day, 6,'2020-03-02') THEN NULL
				ELSE ROUND(AVG(CAST([INCREASE]     AS FLOAT)) OVER (PARTITION BY [MUNICIPALITY_CODE] ORDER BY [DATE_OF_REPORT] ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW),1) 
			END AS [7D_AVERAGE_INFECTED_DAILY_INCREASE],
            CASE WHEN
				DATE_OF_REPORT <  DATEADD(day, 7,'2020-03-02') THEN NULL
				ELSE ROUND(AVG(CAST([INCREASE]      AS FLOAT)) OVER (PARTITION BY [MUNICIPALITY_CODE] ORDER BY [DATE_OF_REPORT] ASC ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING),1) 
			END AS [7D_AVERAGE_INFECTED_DAILY_INCREASE_LAG],

--Average of total infections(absolute). Used to calculate difference
        	CASE WHEN 
			    DATE_OF_REPORT <  DATEADD(day, 7,'2020-03-02') THEN NULL
                ELSE ROUND(AVG(CAST([INCREASE_ABSOLUTE]     AS FLOAT)) OVER (PARTITION BY [MUNICIPALITY_CODE] ORDER BY [DATE_OF_REPORT] ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW),1) 
			END AS [7D_AVERAGE_INFECTED_DAILY_INCREASE_ABSOLUTE]

        FROM TOTALS_CTE

END;
GO
