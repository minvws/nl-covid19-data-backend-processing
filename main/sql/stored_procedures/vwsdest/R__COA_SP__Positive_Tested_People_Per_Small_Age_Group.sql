-- Copyright (c) 2020 De Staat der Nederlanden, Ministerie van   Volksgezondheid, Welzijn en Sport. 
-- Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2 - see https://github.com/minvws/nl-contact-tracing-app-coordinationfor more information.

-- Stored procedure for creating infected people per age group
CREATE OR ALTER PROCEDURE [dbo].[SP_POSITIVE_TESTED_PEOPLE_PER_SMALL_AGE_GROUP]
AS
BEGIN

WITH BASE_CTE AS (
SELECT 
       T1.[DATE_FILE]
      ,CAST(CASE T1.AGEGROUP
             WHEN '<50'		THEN 'Unknown'
             ELSE T1.AGEGROUP
        END AS VARCHAR(100)) AS [AGEGROUP]
      ,T1.INFECTED
      ,T1.DECEASED
      ,T1.HOSPITALIZED
      ,T1.INFECTED_TOTAL
      ,T1.DECEASED_TOTAL
      ,T1.HOSPITALIZED_TOTAL
      ,T1.[DATE_LAST_INSERTED]
  FROM VWSDEST.RIVM_AGEGROUP_TOTALS T1
    INNER JOIN (SELECT DATE_FILE, MAX(DATE_LAST_INSERTED) AS [MAX_DATE_LAST_INSERTED] FROM VWSDEST.RIVM_AGEGROUP_TOTALS GROUP BY DATE_FILE) T2 
    ON T1.DATE_FILE = T2.DATE_FILE AND T1.DATE_LAST_INSERTED = T2.[MAX_DATE_LAST_INSERTED]
)


-- The second CTE combines agegroups (unknown appears twice) and determines the old value and increase  
, SECOND_CTE AS (
SELECT 
	DATE_FILE 
,	DATE_LAST_INSERTED
,	AGEGROUP
,	SUM(INFECTED)																									            AS [NUMBER_OF_INFECTED]
,   SUM(INFECTED_TOTAL)                                                                                                         AS [NUMBER_OF_INFECTED_TOTAL]
,	LAG (SUM(INFECTED),1)       OVER (PARTITION BY AGEGROUP ORDER BY AGEGROUP, DATE_FILE ASC)								    AS [NUMBER_OF_INFECTED_PREVIOUS_DAY]
,	LAG (SUM(INFECTED_TOTAL),1) OVER (PARTITION BY AGEGROUP ORDER BY AGEGROUP, DATE_FILE ASC)						            AS [NUMBER_OF_INFECTED_TOTAL_PREVIOUS_DAY]
,	ISNULL(SUM(INFECTED) - LAG (SUM(INFECTED),1) OVER (PARTITION BY AGEGROUP ORDER BY AGEGROUP, DATE_FILE ASC), 0)	            AS [INCREASE_OF_INFECTED]
,	ISNULL(SUM(INFECTED_TOTAL) - LAG (SUM(INFECTED_TOTAL),1) OVER (PARTITION BY AGEGROUP ORDER BY AGEGROUP, DATE_FILE ASC), 0)	AS [INCREASE_OF_INFECTED_TOTAL]

FROM BASE_CTE
GROUP BY DATE_FILE, AGEGROUP, DATE_LAST_INSERTED, INFECTED_TOTAL
)


-- Final select and insert into statement, where only the max date is filtered out using an inner join on the max date. 
INSERT INTO VWSDEST.POSITIVE_TESTED_PEOPLE_PER_SMALL_AGE_GROUP
    (DATE_OF_REPORT, DATE_OF_REPORT_UNIX, AGEGROUP, INHABITANTS_PERCENTAGE, INFECTED_PERCENTAGE, NUMBER_OF_INFECTED, NUMBER_OF_INFECTED_PREVIOUS_DAY)


SELECT 
	DATE_FILE AS [DATE_OF_REPORT]
,   dbo.CONVERT_DATETIME_TO_UNIX(DATE_FILE)  AS [DATE_OF_REPORT_UNIX]
,	T1.AGEGROUP
,	T3.INHABITANTS_PERCENTAGE
--Calculating the percentage of infected people per age group by dividing by the sum of infected people over all agegroups
,	CASE WHEN (INCREASE_OF_INFECTED_TOTAL) = 0 THEN 0
         ELSE CAST((CAST(INCREASE_OF_INFECTED as decimal(10,3))/ INCREASE_OF_INFECTED_TOTAL) as decimal(10,3))  
         END AS [INFECTED_PERCENTAGE]
,	NUMBER_OF_INFECTED
,	NUMBER_OF_INFECTED_PREVIOUS_DAY
FROM SECOND_CTE T1

--Join to select max date lastinserted per age group
INNER JOIN (SELECT AGEGROUP, MAX(DATE_LAST_INSERTED) AS DATE_LAST_INSERTED FROM SECOND_CTE GROUP BY AGEGROUP) T2 
ON T1.AGEGROUP = T2.AGEGROUP AND T1.DATE_LAST_INSERTED = T2.DATE_LAST_INSERTED
-- Join the inhabitants percentage per agegroup
LEFT JOIN (SELECT AGEGROUP, INHABITANTS_PERCENTAGE FROM [VWSSTATIC].[CBS_AGEGROUP_DISTRIBUTION]
			WHERE DATE_LAST_INSERTED = (SELECT MAX(DATE_LAST_INSERTED) FROM [VWSSTATIC].[CBS_AGEGROUP_DISTRIBUTION])) T3
	ON T1.[AGEGROUP] = T3.[AGEGROUP]




END;
GO